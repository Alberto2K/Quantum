# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

## CONSTANTS ## ##############################################################

# This is the name of the Docker image published by PNNL that we use to invoke
# NWChem.
$DockerImageName = "nwchemorg/nwchem-qc";

# Detect if we're on Windows or not.
# This is needed to deal with some Windows-specific Docker behavior such
# as path mangling and shared drives.
#
# On PS Core, $IsWindows is an automatic variable, but that variable doesn't
# exist on Windows PowerShell (PSEdition = "Desktop"), so we set $IsWindows
# explicitly if we're on Windows PowerShell.
if ($PSVersionTable.PSEdition -eq "Desktop") {
    $IsWindows = $true;
}

<#
    .SYNOPSIS
        Uses Docker to invoke NWChem with a given set of command-line
        arguments.

        See https://hub.docker.com/r/nwchemorg/nwchem-qc/ for documentation
        on using NWChem from Docker.

    .PARAMETER DockerArgs
        Additional arguments to be passed to Docker, e.g.: volume mount
        points.

    .PARAMETER CommandArgs
        Command-line arguments to be passed to NWChem.

    .PARAMETER SkipPull
        If set, no attempt is made to pull an appropriate Docker container.
        This is typically only used when running against a locally built
        container, and should not normally be set.

    .PARAMETER Tag
        The tag of the Docker container to be pulled. This is typically only
        useful when testing functionality on unreleased versions of NWChem.
    
#>
function Invoke-NWChemImage() {
    param(
        [string[]]
        $DockerArgs = @(),

        [string[]]
        $CommandArgs = @(),

        [switch]
        $SkipPull,

        [string]
        $Tag = "latest"
    )

    # Pull the docker image.
    if (-not $SkipPull.IsPresent) {
        docker pull ${DockerImageName}:$Tag
    }

    $dockerCall = `
        "docker run " + `
        ($DockerArgs -join " ") + " " + `
        "-it ${DockerImageName}:$Tag " + `
        ($CommandArgs -join " ")
    "Running docker command: $dockerCall" | Write-Verbose;
    Invoke-Expression $dockerCall;

}

<#
    .SYNOPSIS
        Converts an NWChem input deck into the Broombridge integral dataset
        format.

    .PARAMETER InputDeck
        The path to an NWChem input deck to be converted to Broombridge.

    .PARAMETER DestinationPath
        The path at which the Broombridge output should be saved. If not
        specified, defaults to the same name as the input deck, with the
        file extension changed to .yaml.

    .PARAMETER SkipPull
        If set, no attempt is made to pull an appropriate Docker container.
        This is typically only used when running against a locally built
        container, and should not normally be set.

    .PARAMETER Tag
        The tag of the Docker container to be pulled. This is typically only
        useful when testing functionality on unreleased versions of NWChem.

    .NOTES
        This command uses Docker to run NWChem. If you use this command on
        Windows, you MUST share the drive containing your temporary directory
        (typically C:\) with Docker.

        See https://docs.docker.com/docker-for-windows/#shared-drives for more
        information.

    .EXAMPLE
        PS> Convert-NWChemToBroombridge ./input.nw
        
        Runs NWChem using the input deck at ./input.nw, saving the Broombridge
        ouput generated by NWChem to ./input.yaml.
#>
function Convert-NWChemToBroombridge() {
    param(
        [Parameter(Mandatory=$true)]
        [string]
        $InputDeck,

        [string]
        $DestinationPath = $null,

        [switch]
        $SkipPull,

        [string]
        $Tag = "latest"
    )

    # If no path given, default to setting .yaml extension.
    if (($null -ne $dest) -and ($dest.Length -ge 0)) {
        $dest = $DestinationPath;
    } else {
        $dest = [IO.Path]::ChangeExtension($InputDeck, "yaml");
    }
    Write-Verbose "Saving output to $dest...";

    # Copy the input file to a temp location.
    $inputDirectory = (Join-Path ([System.IO.Path]::GetTempPath()) ([IO.Path]::GetRandomFileName()));
    mkdir -Path $inputDirectory | Out-Null;
    Copy-Item $InputDeck $inputDirectory;

    # Resolve backslashes in the volume path.
    if ($IsWindows) {
        $dockerPath = (Resolve-Path $inputDirectory).Path.Replace("`\", "/")
    } else {
        $dockerPath = (Resolve-Path $inputDirectory).Path;
    }

    # Compute the name that NWChem's yaml_driver entrypoint will assign
    # to the output Broombridge instance.
    $outputFile = [IO.Path]::ChangeExtension(([IO.Path]::GetFileName($InputDeck)), "yaml");

    Invoke-NWChemImage `
        -SkipPull:$SkipPull -Tag $Tag `
        -DockerArgs "-v", "${dockerPath}:/opt/data" `
        -CommandArgs ([IO.Path]::GetFileName($InputDeck))

    $outputPath = (Join-Path $dockerPath $outputFile);
    if (Test-Path $outputPath -PathType Leaf) {
        Copy-Item $outputPath $dest;
    } else {
        if ($IsWindows) {
            Write-Error "NWChem did not produce a Broombridge output. " + `
                "Please check that "
        } else {
            Write-Error "NWChem did not produce a Broombridge output."
        }
    }
    
    Remove-Item -Recurse $inputDirectory;

}

## EXPORTS ###################################################################

Export-ModuleMember `
    -Function `
        "Invoke-NWChemImage", `
        "Convert-NWChemToBroombridge"

# SIG # Begin signature block
# MIIkTAYJKoZIhvcNAQcCoIIkPTCCJDkCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCDroWP6EcHHTVZm
# FakwgWLBkmdGO68v6CzMrO6V6pXTMqCCDYEwggX/MIID56ADAgECAhMzAAABA14l
# HJkfox64AAAAAAEDMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNVBAYTAlVTMRMwEQYD
# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
# bmcgUENBIDIwMTEwHhcNMTgwNzEyMjAwODQ4WhcNMTkwNzI2MjAwODQ4WjB0MQsw
# CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
# ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMR4wHAYDVQQDExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
# AQDRlHY25oarNv5p+UZ8i4hQy5Bwf7BVqSQdfjnnBZ8PrHuXss5zCvvUmyRcFrU5
# 3Rt+M2wR/Dsm85iqXVNrqsPsE7jS789Xf8xly69NLjKxVitONAeJ/mkhvT5E+94S
# nYW/fHaGfXKxdpth5opkTEbOttU6jHeTd2chnLZaBl5HhvU80QnKDT3NsumhUHjR
# hIjiATwi/K+WCMxdmcDt66VamJL1yEBOanOv3uN0etNfRpe84mcod5mswQ4xFo8A
# DwH+S15UD8rEZT8K46NG2/YsAzoZvmgFFpzmfzS/p4eNZTkmyWPU78XdvSX+/Sj0
# NIZ5rCrVXzCRO+QUauuxygQjAgMBAAGjggF+MIIBejAfBgNVHSUEGDAWBgorBgEE
# AYI3TAgBBggrBgEFBQcDAzAdBgNVHQ4EFgQUR77Ay+GmP/1l1jjyA123r3f3QP8w
# UAYDVR0RBEkwR6RFMEMxKTAnBgNVBAsTIE1pY3Jvc29mdCBPcGVyYXRpb25zIFB1
# ZXJ0byBSaWNvMRYwFAYDVQQFEw0yMzAwMTIrNDM3OTY1MB8GA1UdIwQYMBaAFEhu
# ZOVQBdOCqhc3NyK1bajKdQKVMFQGA1UdHwRNMEswSaBHoEWGQ2h0dHA6Ly93d3cu
# bWljcm9zb2Z0LmNvbS9wa2lvcHMvY3JsL01pY0NvZFNpZ1BDQTIwMTFfMjAxMS0w
# Ny0wOC5jcmwwYQYIKwYBBQUHAQEEVTBTMFEGCCsGAQUFBzAChkVodHRwOi8vd3d3
# Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NlcnRzL01pY0NvZFNpZ1BDQTIwMTFfMjAx
# MS0wNy0wOC5jcnQwDAYDVR0TAQH/BAIwADANBgkqhkiG9w0BAQsFAAOCAgEAn/XJ
# Uw0/DSbsokTYDdGfY5YGSz8eXMUzo6TDbK8fwAG662XsnjMQD6esW9S9kGEX5zHn
# wya0rPUn00iThoj+EjWRZCLRay07qCwVlCnSN5bmNf8MzsgGFhaeJLHiOfluDnjY
# DBu2KWAndjQkm925l3XLATutghIWIoCJFYS7mFAgsBcmhkmvzn1FFUM0ls+BXBgs
# 1JPyZ6vic8g9o838Mh5gHOmwGzD7LLsHLpaEk0UoVFzNlv2g24HYtjDKQ7HzSMCy
# RhxdXnYqWJ/U7vL0+khMtWGLsIxB6aq4nZD0/2pCD7k+6Q7slPyNgLt44yOneFuy
# bR/5WcF9ttE5yXnggxxgCto9sNHtNr9FB+kbNm7lPTsFA6fUpyUSj+Z2oxOzRVpD
# MYLa2ISuubAfdfX2HX1RETcn6LU1hHH3V6qu+olxyZjSnlpkdr6Mw30VapHxFPTy
# 2TUxuNty+rR1yIibar+YRcdmstf/zpKQdeTr5obSyBvbJ8BblW9Jb1hdaSreU0v4
# 6Mp79mwV+QMZDxGFqk+av6pX3WDG9XEg9FGomsrp0es0Rz11+iLsVT9qGTlrEOla
# P470I3gwsvKmOMs1jaqYWSRAuDpnpAdfoP7YO0kT+wzh7Qttg1DO8H8+4NkI6Iwh
# SkHC3uuOW+4Dwx1ubuZUNWZncnwa6lL2IsRyP64wggd6MIIFYqADAgECAgphDpDS
# AAAAAAADMA0GCSqGSIb3DQEBCwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMK
# V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
# IENvcnBvcmF0aW9uMTIwMAYDVQQDEylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0
# ZSBBdXRob3JpdHkgMjAxMTAeFw0xMTA3MDgyMDU5MDlaFw0yNjA3MDgyMTA5MDla
# MH4xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdS
# ZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMT
# H01pY3Jvc29mdCBDb2RlIFNpZ25pbmcgUENBIDIwMTEwggIiMA0GCSqGSIb3DQEB
# AQUAA4ICDwAwggIKAoICAQCr8PpyEBwurdhuqoIQTTS68rZYIZ9CGypr6VpQqrgG
# OBoESbp/wwwe3TdrxhLYC/A4wpkGsMg51QEUMULTiQ15ZId+lGAkbK+eSZzpaF7S
# 35tTsgosw6/ZqSuuegmv15ZZymAaBelmdugyUiYSL+erCFDPs0S3XdjELgN1q2jz
# y23zOlyhFvRGuuA4ZKxuZDV4pqBjDy3TQJP4494HDdVceaVJKecNvqATd76UPe/7
# 4ytaEB9NViiienLgEjq3SV7Y7e1DkYPZe7J7hhvZPrGMXeiJT4Qa8qEvWeSQOy2u
# M1jFtz7+MtOzAz2xsq+SOH7SnYAs9U5WkSE1JcM5bmR/U7qcD60ZI4TL9LoDho33
# X/DQUr+MlIe8wCF0JV8YKLbMJyg4JZg5SjbPfLGSrhwjp6lm7GEfauEoSZ1fiOIl
# XdMhSz5SxLVXPyQD8NF6Wy/VI+NwXQ9RRnez+ADhvKwCgl/bwBWzvRvUVUvnOaEP
# 6SNJvBi4RHxF5MHDcnrgcuck379GmcXvwhxX24ON7E1JMKerjt/sW5+v/N2wZuLB
# l4F77dbtS+dJKacTKKanfWeA5opieF+yL4TXV5xcv3coKPHtbcMojyyPQDdPweGF
# RInECUzF1KVDL3SV9274eCBYLBNdYJWaPk8zhNqwiBfenk70lrC8RqBsmNLg1oiM
# CwIDAQABo4IB7TCCAekwEAYJKwYBBAGCNxUBBAMCAQAwHQYDVR0OBBYEFEhuZOVQ
# BdOCqhc3NyK1bajKdQKVMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1Ud
# DwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFHItOgIxkEO5FAVO
# 4eqnxzHRI4k0MFoGA1UdHwRTMFEwT6BNoEuGSWh0dHA6Ly9jcmwubWljcm9zb2Z0
# LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dDIwMTFfMjAxMV8wM18y
# Mi5jcmwwXgYIKwYBBQUHAQEEUjBQME4GCCsGAQUFBzAChkJodHRwOi8vd3d3Lm1p
# Y3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1Jvb0NlckF1dDIwMTFfMjAxMV8wM18y
# Mi5jcnQwgZ8GA1UdIASBlzCBlDCBkQYJKwYBBAGCNy4DMIGDMD8GCCsGAQUFBwIB
# FjNodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2RvY3MvcHJpbWFyeWNw
# cy5odG0wQAYIKwYBBQUHAgIwNB4yIB0ATABlAGcAYQBsAF8AcABvAGwAaQBjAHkA
# XwBzAHQAYQB0AGUAbQBlAG4AdAAuIB0wDQYJKoZIhvcNAQELBQADggIBAGfyhqWY
# 4FR5Gi7T2HRnIpsLlhHhY5KZQpZ90nkMkMFlXy4sPvjDctFtg/6+P+gKyju/R6mj
# 82nbY78iNaWXXWWEkH2LRlBV2AySfNIaSxzzPEKLUtCw/WvjPgcuKZvmPRul1LUd
# d5Q54ulkyUQ9eHoj8xN9ppB0g430yyYCRirCihC7pKkFDJvtaPpoLpWgKj8qa1hJ
# Yx8JaW5amJbkg/TAj/NGK978O9C9Ne9uJa7lryft0N3zDq+ZKJeYTQ49C/IIidYf
# wzIY4vDFLc5bnrRJOQrGCsLGra7lstnbFYhRRVg4MnEnGn+x9Cf43iw6IGmYslmJ
# aG5vp7d0w0AFBqYBKig+gj8TTWYLwLNN9eGPfxxvFX1Fp3blQCplo8NdUmKGwx1j
# NpeG39rz+PIWoZon4c2ll9DuXWNB41sHnIc+BncG0QaxdR8UvmFhtfDcxhsEvt9B
# xw4o7t5lL+yX9qFcltgA1qFGvVnzl6UJS0gQmYAf0AApxbGbpT9Fdx41xtKiop96
# eiL6SJUfq/tHI4D1nvi/a7dLl+LrdXga7Oo3mXkYS//WsyNodeav+vyL6wuA6mk7
# r/ww7QRMjt/fdW1jkT3RnVZOT7+AVyKheBEyIXrvQQqxP/uozKRdwaGIm1dxVk5I
# RcBCyZt2WwqASGv9eZ/BvW1taslScxMNelDNMYIWITCCFh0CAQEwgZUwfjELMAkG
# A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQx
# HjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEoMCYGA1UEAxMfTWljcm9z
# b2Z0IENvZGUgU2lnbmluZyBQQ0EgMjAxMQITMwAAAQNeJRyZH6MeuAAAAAABAzAN
# BglghkgBZQMEAgEFAKCBsDAZBgkqhkiG9w0BCQMxDAYKKwYBBAGCNwIBBDAcBgor
# BgEEAYI3AgELMQ4wDAYKKwYBBAGCNwIBFTAvBgkqhkiG9w0BCQQxIgQg6DVxOyCR
# qZUqKYL4Yyk1xKuPwkwIC5EKBylRHQ6PokwwRAYKKwYBBAGCNwIBDDE2MDSgFIAS
# AE0AaQBjAHIAbwBzAG8AZgB0oRyAGmh0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20g
# MA0GCSqGSIb3DQEBAQUABIIBAJ0kabBUHQOTBPgL/gPxlsB78vuSj72TxrjFkC0Q
# g5iamuZWDE2ICiZ9B8AnC4yMtqxxku+ls/8uGvp0G0BhIJBUXJ96WNwbWbt6yElK
# xVf72hGGct7f9ygrjgiYSZy5769UiC9C1LVpYPMx2tuDdA02dUhT+QJ2HQEW7HGZ
# V1sKRKBCdD0nRzX3doKlLjA9gpX/M2jFAgEgSaAzhz8MR4/6PQ9CHZRxKEdo3vXT
# bjVt4xifecG+68gzRQHM3kOPpZ2hN+o7VSbgwTFJ1Z7KdZMRUw6tHgQhcl2cLoOw
# qjsztydZbBq2UrlR+3stezfV1waYw+j+QpnROD2DmqNnBuehghOpMIITpQYKKwYB
# BAGCNwMDATGCE5UwghORBgkqhkiG9w0BBwKgghOCMIITfgIBAzEPMA0GCWCGSAFl
# AwQCAQUAMIIBVAYLKoZIhvcNAQkQAQSgggFDBIIBPzCCATsCAQEGCisGAQQBhFkK
# AwEwMTANBglghkgBZQMEAgEFAAQgpZLTknYejKB++mcL20yosvD3NbJcRLHGYrDl
# KarhKAoCBlvN9CD3pRgTMjAxODEwMjkyMDMzMzIuMzM2WjAHAgEBgAIB9KCB0KSB
# zTCByjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
# B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjElMCMGA1UE
# CxMcTWljcm9zb2Z0IEFtZXJpY2EgT3BlcmF0aW9uczEmMCQGA1UECxMdVGhhbGVz
# IFRTUyBFU046RDIzNi0zN0RBLTk3NjExJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1l
# LVN0YW1wIFNlcnZpY2Wggg8VMIIGcTCCBFmgAwIBAgIKYQmBKgAAAAAAAjANBgkq
# hkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
# EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
# bjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5
# IDIwMTAwHhcNMTAwNzAxMjEzNjU1WhcNMjUwNzAxMjE0NjU1WjB8MQswCQYDVQQG
# EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
# A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQg
# VGltZS1TdGFtcCBQQ0EgMjAxMDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
# ggEBAKkdDbx3EYo6IOz8E5f1+n9plGt0VBDVpQoAgoX77XxoSyxfxcPlYcJ2tz5m
# K1vwFVMnBDEfQRsalR3OCROOfGEwWbEwRA/xYIiEVEMM1024OAizQt2TrNZzMFcm
# gqNFDdDq9UeBzb8kYDJYYEbyWEeGMoQedGFnkV+BVLHPk0ySwcSmXdFhE24oxhr5
# hoC732H8RsEnHSRnEnIaIYqvS2SJUGKxXf13Hz3wV3WsvYpCTUBR0Q+cBj5nf/Vm
# wAOWRH7v0Ev9buWayrGo8noqCjHw2k4GkbaICDXoeByw6ZnNPOcvRLqn9NxkvaQB
# wSAJk3jN/LzAyURdXhacAQVPIk0CAwEAAaOCAeYwggHiMBAGCSsGAQQBgjcVAQQD
# AgEAMB0GA1UdDgQWBBTVYzpcijGQ80N7fEYbxTNoWoVtVTAZBgkrBgEEAYI3FAIE
# DB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNV
# HSMEGDAWgBTV9lbLj+iiXGJo0T2UkFvXzpoYxDBWBgNVHR8ETzBNMEugSaBHhkVo
# dHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29D
# ZXJBdXRfMjAxMC0wNi0yMy5jcmwwWgYIKwYBBQUHAQEETjBMMEoGCCsGAQUFBzAC
# hj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1Jvb0NlckF1
# dF8yMDEwLTA2LTIzLmNydDCBoAYDVR0gAQH/BIGVMIGSMIGPBgkrBgEEAYI3LgMw
# gYEwPQYIKwYBBQUHAgEWMWh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9QS0kvZG9j
# cy9DUFMvZGVmYXVsdC5odG0wQAYIKwYBBQUHAgIwNB4yIB0ATABlAGcAYQBsAF8A
# UABvAGwAaQBjAHkAXwBTAHQAYQB0AGUAbQBlAG4AdAAuIB0wDQYJKoZIhvcNAQEL
# BQADggIBAAfmiFEN4sbgmD+BcQM9naOhIW+z66bM9TG+zwXiqf76V20ZMLPCxWbJ
# at/15/B4vceoniXj+bzta1RXCCtRgkQS+7lTjMz0YBKKdsxAQEGb3FwX/1z5Xhc1
# mCRWS3TvQhDIr79/xn/yN31aPxzymXlKkVIArzgPF/UveYFl2am1a+THzvbKegBv
# SzBEJCI8z+0DpZaPWSm8tv0E4XCfMkon/VWvL/625Y4zu2JfmttXQOnxzplmkIz/
# amJ/3cVKC5Em4jnsGUpxY517IW3DnKOiPPp/fZZqkHimbdLhnPkd/DjYlPTGpQqW
# hqS9nhquBEKDuLWAmyI4ILUl5WTs9/S/fmNZJQ96LjlXdqJxqgaKD4kWumGnEcua
# 2A5HmoDF0M2n0O99g/DhO3EJ3110mCIIYdqwUB5vvfHhAN/nMQekkzr3ZUd46Pio
# SKv33nJ+YWtvd6mBy6cJrDm77MbL2IK0cs0d9LiFAR6A+xuJKlQ5slvayA1VmXqH
# czsI5pgt6o3gMy4SKfXAL1QnIffIrE7aKLixqduWsqdCosnPGUFN4Ib5KpqjEWYw
# 07t0MkvfY3v1mYovG8chr1m1rtxEPJdQcdeh0sVV42neV8HR3jDA/czmTfsNv11P
# 6Z0eGTgvvM9YBS7vDaBQNdrvCScc1bN+NR4Iuto229Nfj950iEkSMIIE8TCCA9mg
# AwIBAgITMwAAAMlK1n6YThTUewAAAAAAyTANBgkqhkiG9w0BAQsFADB8MQswCQYD
# VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEe
# MBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3Nv
# ZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDAeFw0xODA4MjMyMDI2MTNaFw0xOTExMjMy
# MDI2MTNaMIHKMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
# A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSUw
# IwYDVQQLExxNaWNyb3NvZnQgQW1lcmljYSBPcGVyYXRpb25zMSYwJAYDVQQLEx1U
# aGFsZXMgVFNTIEVTTjpEMjM2LTM3REEtOTc2MTElMCMGA1UEAxMcTWljcm9zb2Z0
# IFRpbWUtU3RhbXAgU2VydmljZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
# ggEBANYjaoQ2UEPBUNTS4UPpL11PaEO/UFNLuogXBRIhEBMP0ZudXHR08PQyWlZw
# ZSrdggcB4/gEppzEUCZxyAOUpZLSqj75rxCViSABt0leuhOAHeX8MHDv6GobJL59
# GNHnZj2SbyXZEyYK++w1oEKJKVv2F2bmpuLSyX0SiYP36urUtPwQdm3rrtZ2aGa9
# alTK/Tl+pEiKDVcV2dKbVT3CJlSvlBhzjp214IHBzwJX7YACFIdXlQvuI9pCUaGL
# re96b8k1KFVveMWAx16HkfYt+XvCQpWGX6tkRHwmupbW56f4XOaelvCgJ5LnUpGX
# T8OsnvXU8EC5o9zp1sLjgdjnmBkCAwEAAaOCARswggEXMB0GA1UdDgQWBBQrhuMJ
# APMlE8c1b2VwuH4gDpp7JzAfBgNVHSMEGDAWgBTVYzpcijGQ80N7fEYbxTNoWoVt
# VTBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtp
# L2NybC9wcm9kdWN0cy9NaWNUaW1TdGFQQ0FfMjAxMC0wNy0wMS5jcmwwWgYIKwYB
# BQUHAQEETjBMMEoGCCsGAQUFBzAChj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20v
# cGtpL2NlcnRzL01pY1RpbVN0YVBDQV8yMDEwLTA3LTAxLmNydDAMBgNVHRMBAf8E
# AjAAMBMGA1UdJQQMMAoGCCsGAQUFBwMIMA0GCSqGSIb3DQEBCwUAA4IBAQAD1vAT
# n1fy5B2lHrKdpjK5mmCz4itQCTdCJC/bpW8vEm4jdnW818H08sQwt2GMnYIxq3T/
# usrLrDW7uaYrx16l9DyXeEis41mfEsEpVpCjqqaT0shx4hmdD5JRgGCmG3La/Hql
# KtgoV+d6twPgBV52NgupSK5vKH6ni6M5rVphyYbaSR1a/DxAn5SyE2TpSg1XglyB
# BVPuQegAy7dI/1aLPZ4m92hS2j8HbEMzjlIDpaPVgxl4Xlxfc5csR4Ckr6ui3B35
# fDNrlyAy8uShmwkFveu+g8/uc6hG2UZy97jAdcFPqofbWyFDhjjiSSMUGg1/EkUB
# pM/Y18ivuDB2UW9soYIDpzCCAo8CAQEwgfqhgdCkgc0wgcoxCzAJBgNVBAYTAlVT
# MRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
# ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJTAjBgNVBAsTHE1pY3Jvc29mdCBBbWVy
# aWNhIE9wZXJhdGlvbnMxJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOkQyMzYtMzdE
# QS05NzYxMSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNloiUK
# AQEwCQYFKw4DAhoFAAMVAGSC4KoXbHiKw909SsGSry/oPEgXoIHaMIHXpIHUMIHR
# MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVk
# bW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSUwIwYDVQQLExxN
# aWNyb3NvZnQgQW1lcmljYSBPcGVyYXRpb25zMScwJQYDVQQLEx5uQ2lwaGVyIE5U
# UyBFU046MjY2NS00QzNGLUM1REUxKzApBgNVBAMTIk1pY3Jvc29mdCBUaW1lIFNv
# dXJjZSBNYXN0ZXIgQ2xvY2swDQYJKoZIhvcNAQEFBQACBQDfgVOdMCIYDzIwMTgx
# MDI5MDkzODM3WhgPMjAxODEwMzAwOTM4MzdaMHYwPAYKKwYBBAGEWQoEATEuMCww
# CgIFAN+BU50CAQAwCQIBAAIBZgIB/zAHAgEAAgIZQTAKAgUA34KlHQIBADA2Bgor
# BgEEAYRZCgQCMSgwJjAMBgorBgEEAYRZCgMBoAowCAIBAAIDFuNgoQowCAIBAAID
# HoSAMA0GCSqGSIb3DQEBBQUAA4IBAQDBDfTGdnxz8gPDUcSQqeh5ADMIISyPxcr7
# 88vPtkdIkBw4MGTI5E4ljwObaPCMdurCalsoebWc2Le+LwkHWBwkcIfhDGxg4Ua+
# Y4e5n2s0zEgjxBiCFG1brQ84y65IWyX48tGc01vMqsQE0qN+5P3TlqVpLSL8nAcU
# q0ugZrXEmyQ0OlKIwghq9VRrHsUMhCRpR+VVE1bZtUnGf+8CqsoX3h3Epzej68De
# Js44m39hQLCOlvPSG51qvvEQK0IhLL8/DoZhZtq8lUNiiVe37mhZIt/5Zh0QCMbe
# NIZXa7IcggSARs/m0TJ88LUhO+zVe46fuyTDBCY/tx3+c0OVGuKoMYIC9TCCAvEC
# AQEwgZMwfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNV
# BAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQG
# A1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTACEzMAAADJStZ+mE4U
# 1HsAAAAAAMkwDQYJYIZIAWUDBAIBBQCgggEyMBoGCSqGSIb3DQEJAzENBgsqhkiG
# 9w0BCRABBDAvBgkqhkiG9w0BCQQxIgQgzhMN6EIX6lZKCHxWddMKU4/rT2Ko6W/7
# 2aApbDRC7i0wgeIGCyqGSIb3DQEJEAIMMYHSMIHPMIHMMIGxBBRkguCqF2x4isPd
# PUrBkq8v6DxIFzCBmDCBgKR+MHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
# aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
# cG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEw
# AhMzAAAAyUrWfphOFNR7AAAAAADJMBYEFHqkK281aeIZOgf6Z9ZofWldP5EzMA0G
# CSqGSIb3DQEBCwUABIIBAFOvlJG968QM1P0zQqsn65CiY2pMv5QkFQsAjs43gNrU
# vW2LzO6w8zgZv5pUANWkAtRa6EmFp///h6Nnf+yBI19yj+nU7zSpAki0M0j9YmeG
# K5nJteRZkRm8sX6jVLHF7B2Efrj3m09FaVChtVf8qttVvQ0d0tKSji4Yqsrknjag
# RfhcYfWrGKYEMFvlRt45rdWAYP16rOA4ys+RVRDR/wo29CgslXwiZ3fvhk/eQID2
# WPcKfYoQcKtZvA+jshxPHNkPCQ7Khy6Axqm/6ASlrEaOCchF346KOFUHgoPG7CJo
# elmtdEp9pnhgP9DbLfNBtH1l+to2zQAdznR6KP+f0s4=
# SIG # End signature block
